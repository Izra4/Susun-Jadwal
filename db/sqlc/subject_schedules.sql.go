// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: subject_schedules.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createNewSubjectSchedules = `-- name: CreateNewSubjectSchedules :execresult
insert into subject_schedules(day,time,room,class_id)
    VALUES(?,?,?,?)
`

type CreateNewSubjectSchedulesParams struct {
	Day     string
	Time    string
	Room    string
	ClassID int32
}

func (q *Queries) CreateNewSubjectSchedules(ctx context.Context, arg CreateNewSubjectSchedulesParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createNewSubjectSchedules,
		arg.Day,
		arg.Time,
		arg.Room,
		arg.ClassID,
	)
}

const deleteSchedule = `-- name: DeleteSchedule :exec
DELETE FROM subject_schedules
    WHERE id = ?
`

func (q *Queries) DeleteSchedule(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteSchedule, id)
	return err
}

const getSchedulesById = `-- name: GetSchedulesById :one
SELECT id, day, time, room, class_id, createdat, updatedat, deletedat FROM subject_schedules
WHERE id = ?
`

func (q *Queries) GetSchedulesById(ctx context.Context, id int32) (SubjectSchedule, error) {
	row := q.db.QueryRowContext(ctx, getSchedulesById, id)
	var i SubjectSchedule
	err := row.Scan(
		&i.ID,
		&i.Day,
		&i.Time,
		&i.Room,
		&i.ClassID,
		&i.Createdat,
		&i.Updatedat,
		&i.Deletedat,
	)
	return i, err
}

const listAllMajorSchedules = `-- name: ListAllMajorSchedules :many
SELECT id, day, time, room, class_id, createdat, updatedat, deletedat FROM subject_schedules
ORDER BY
        CASE
            WHEN day = 'Senin' THEN 1
        WHEN day = 'Selasa' THEN 2
        WHEN day = 'Rabu' THEN 3
        WHEN day = 'Kamis' THEN 4
        WHEN day = 'Jum''at' THEN 5
        ELSE 6
END
`

func (q *Queries) ListAllMajorSchedules(ctx context.Context) ([]SubjectSchedule, error) {
	rows, err := q.db.QueryContext(ctx, listAllMajorSchedules)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SubjectSchedule
	for rows.Next() {
		var i SubjectSchedule
		if err := rows.Scan(
			&i.ID,
			&i.Day,
			&i.Time,
			&i.Room,
			&i.ClassID,
			&i.Createdat,
			&i.Updatedat,
			&i.Deletedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSchedule = `-- name: UpdateSchedule :exec
UPDATE subject_schedules
    SET day = ?, time = ?, room = ?, class_id = ?
    WHERE id = ?
`

type UpdateScheduleParams struct {
	Day     string
	Time    string
	Room    string
	ClassID int32
	ID      int32
}

func (q *Queries) UpdateSchedule(ctx context.Context, arg UpdateScheduleParams) error {
	_, err := q.db.ExecContext(ctx, updateSchedule,
		arg.Day,
		arg.Time,
		arg.Room,
		arg.ClassID,
		arg.ID,
	)
	return err
}
