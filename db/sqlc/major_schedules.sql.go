// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: major_schedules.sql

package sqlc

import (
	"context"
)

const getSchedulesByDay = `-- name: GetSchedulesByDay :many
SELECT id, day, time, room, class_id FROM major_schedules
WHERE day = ?
`

func (q *Queries) GetSchedulesByDay(ctx context.Context, day string) ([]MajorSchedule, error) {
	rows, err := q.db.QueryContext(ctx, getSchedulesByDay, day)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MajorSchedule
	for rows.Next() {
		var i MajorSchedule
		if err := rows.Scan(
			&i.ID,
			&i.Day,
			&i.Time,
			&i.Room,
			&i.ClassID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSchedulesById = `-- name: GetSchedulesById :one
SELECT id, day, time, room, class_id FROM major_schedules
WHERE id = ?
`

func (q *Queries) GetSchedulesById(ctx context.Context, id int32) (MajorSchedule, error) {
	row := q.db.QueryRowContext(ctx, getSchedulesById, id)
	var i MajorSchedule
	err := row.Scan(
		&i.ID,
		&i.Day,
		&i.Time,
		&i.Room,
		&i.ClassID,
	)
	return i, err
}

const listAllMajorSchedules = `-- name: ListAllMajorSchedules :many
SELECT id, day, time, room, class_id FROM major_schedules
ORDER BY day
`

func (q *Queries) ListAllMajorSchedules(ctx context.Context) ([]MajorSchedule, error) {
	rows, err := q.db.QueryContext(ctx, listAllMajorSchedules)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MajorSchedule
	for rows.Next() {
		var i MajorSchedule
		if err := rows.Scan(
			&i.ID,
			&i.Day,
			&i.Time,
			&i.Room,
			&i.ClassID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
