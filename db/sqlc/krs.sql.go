// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: krs.sql

package sqlc

import (
	"context"
	"database/sql"
)

const addKrs = `-- name: AddKrs :execresult
INSERT INTO krs(totals, userID)
    VALUES (?,?)
`

type AddKrsParams struct {
	Totals int32
	Userid int32
}

func (q *Queries) AddKrs(ctx context.Context, arg AddKrsParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addKrs, arg.Totals, arg.Userid)
}

const deleteKrs = `-- name: DeleteKrs :exec
DELETE FROM krs
    WHERE id = ?
`

func (q *Queries) DeleteKrs(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteKrs, id)
	return err
}

const getAllKrs = `-- name: GetAllKrs :many
SELECT id, createdat, updatedat, deletedat, totals, userid FROM krs
ORDER BY id ASC
`

func (q *Queries) GetAllKrs(ctx context.Context) ([]Kr, error) {
	rows, err := q.db.QueryContext(ctx, getAllKrs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Kr
	for rows.Next() {
		var i Kr
		if err := rows.Scan(
			&i.ID,
			&i.Createdat,
			&i.Updatedat,
			&i.Deletedat,
			&i.Totals,
			&i.Userid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getKrsByID = `-- name: GetKrsByID :one
SELECT id, createdat, updatedat, deletedat, totals, userid FROM krs
WHERE id = ?
`

func (q *Queries) GetKrsByID(ctx context.Context, id int32) (Kr, error) {
	row := q.db.QueryRowContext(ctx, getKrsByID, id)
	var i Kr
	err := row.Scan(
		&i.ID,
		&i.Createdat,
		&i.Updatedat,
		&i.Deletedat,
		&i.Totals,
		&i.Userid,
	)
	return i, err
}

const getKrsByIDUser = `-- name: GetKrsByIDUser :many
SELECT id, createdat, updatedat, deletedat, totals, userid FROM krs
WHERE userID = ?
`

func (q *Queries) GetKrsByIDUser(ctx context.Context, userid int32) ([]Kr, error) {
	rows, err := q.db.QueryContext(ctx, getKrsByIDUser, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Kr
	for rows.Next() {
		var i Kr
		if err := rows.Scan(
			&i.ID,
			&i.Createdat,
			&i.Updatedat,
			&i.Deletedat,
			&i.Totals,
			&i.Userid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateKrs = `-- name: UpdateKrs :exec
UPDATE krs
    SET totals = ?, userID = ?
    WHERE id = ?
`

type UpdateKrsParams struct {
	Totals int32
	Userid int32
	ID     int32
}

func (q *Queries) UpdateKrs(ctx context.Context, arg UpdateKrsParams) error {
	_, err := q.db.ExecContext(ctx, updateKrs, arg.Totals, arg.Userid, arg.ID)
	return err
}
