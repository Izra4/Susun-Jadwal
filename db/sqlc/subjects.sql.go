// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: subjects.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createNewSubject = `-- name: CreateNewSubject :execresult
INSERT INTO subjects (name,curriculum,sks,id_prodi)
    VALUES(?,?,?,?)
`

type CreateNewSubjectParams struct {
	Name       string
	Curriculum string
	Sks        int32
	IDProdi    int32
}

func (q *Queries) CreateNewSubject(ctx context.Context, arg CreateNewSubjectParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createNewSubject,
		arg.Name,
		arg.Curriculum,
		arg.Sks,
		arg.IDProdi,
	)
}

const deleteSubject = `-- name: DeleteSubject :exec
DELETE FROM subjects
    WHERE id = ?
`

func (q *Queries) DeleteSubject(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteSubject, id)
	return err
}

const getAllSubjects = `-- name: GetAllSubjects :many
SELECT id, createdat, updatedat, deletedat, name, curriculum, sks, id_prodi FROM subjects
ORDER BY name ASC
`

func (q *Queries) GetAllSubjects(ctx context.Context) ([]Subject, error) {
	rows, err := q.db.QueryContext(ctx, getAllSubjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subject
	for rows.Next() {
		var i Subject
		if err := rows.Scan(
			&i.ID,
			&i.Createdat,
			&i.Updatedat,
			&i.Deletedat,
			&i.Name,
			&i.Curriculum,
			&i.Sks,
			&i.IDProdi,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSubjectById = `-- name: GetSubjectById :one
SELECT id, createdat, updatedat, deletedat, name, curriculum, sks, id_prodi FROM subjects
    WHERE id = ?
`

func (q *Queries) GetSubjectById(ctx context.Context, id int32) (Subject, error) {
	row := q.db.QueryRowContext(ctx, getSubjectById, id)
	var i Subject
	err := row.Scan(
		&i.ID,
		&i.Createdat,
		&i.Updatedat,
		&i.Deletedat,
		&i.Name,
		&i.Curriculum,
		&i.Sks,
		&i.IDProdi,
	)
	return i, err
}

const updateSubject = `-- name: UpdateSubject :exec
UPDATE subjects
    SET name = ?, curriculum = ?, sks = ?, id_prodi = ?
    WHERE id = ?
`

type UpdateSubjectParams struct {
	Name       string
	Curriculum string
	Sks        int32
	IDProdi    int32
	ID         int32
}

func (q *Queries) UpdateSubject(ctx context.Context, arg UpdateSubjectParams) error {
	_, err := q.db.ExecContext(ctx, updateSubject,
		arg.Name,
		arg.Curriculum,
		arg.Sks,
		arg.IDProdi,
		arg.ID,
	)
	return err
}
