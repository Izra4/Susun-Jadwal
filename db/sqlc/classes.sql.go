// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: classes.sql

package sqlc

import (
	"context"
	"database/sql"
)

const addNewClass = `-- name: AddNewClass :execresult
INSERT INTO classes(name,member,subject_id)
    VALUES (?,?,?)
`

type AddNewClassParams struct {
	Name      string
	Member    int32
	SubjectID int32
}

func (q *Queries) AddNewClass(ctx context.Context, arg AddNewClassParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addNewClass, arg.Name, arg.Member, arg.SubjectID)
}

const deleteClass = `-- name: DeleteClass :exec
DELETE FROM classes
WHERE id = ?
`

func (q *Queries) DeleteClass(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteClass, id)
	return err
}

const getClassById = `-- name: GetClassById :one
SELECT id, name, member, createdat, updatedat, deletedat, subject_id FROM classes
WHERE id = ?
`

func (q *Queries) GetClassById(ctx context.Context, id int32) (Class, error) {
	row := q.db.QueryRowContext(ctx, getClassById, id)
	var i Class
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Member,
		&i.Createdat,
		&i.Updatedat,
		&i.Deletedat,
		&i.SubjectID,
	)
	return i, err
}

const listClass = `-- name: ListClass :many
SELECT id, name, member, createdat, updatedat, deletedat, subject_id FROM classes
ORDER BY name
`

func (q *Queries) ListClass(ctx context.Context) ([]Class, error) {
	rows, err := q.db.QueryContext(ctx, listClass)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Class
	for rows.Next() {
		var i Class
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Member,
			&i.Createdat,
			&i.Updatedat,
			&i.Deletedat,
			&i.SubjectID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateClass = `-- name: UpdateClass :exec
UPDATE classes
    SET name = ?, member = ?, subject_id = ?
    WHERE id = ?
`

type UpdateClassParams struct {
	Name      string
	Member    int32
	SubjectID int32
	ID        int32
}

func (q *Queries) UpdateClass(ctx context.Context, arg UpdateClassParams) error {
	_, err := q.db.ExecContext(ctx, updateClass,
		arg.Name,
		arg.Member,
		arg.SubjectID,
		arg.ID,
	)
	return err
}
