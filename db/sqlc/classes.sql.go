// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: classes.sql

package sqlc

import (
	"context"
	"database/sql"
)

const addNewClass = `-- name: AddNewClass :execresult
INSERT INTO classes(name,member,major_id)
    VALUES (?,?,?)
`

type AddNewClassParams struct {
	Name    string
	Member  int32
	MajorID int32
}

func (q *Queries) AddNewClass(ctx context.Context, arg AddNewClassParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addNewClass, arg.Name, arg.Member, arg.MajorID)
}

const deleteClass = `-- name: DeleteClass :exec
DELETE FROM classes
WHERE id = ?
`

func (q *Queries) DeleteClass(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteClass, id)
	return err
}

const getClassById = `-- name: GetClassById :one
SELECT id, name, member, major_id FROM classes
WHERE id = ? LIMIT 1
`

func (q *Queries) GetClassById(ctx context.Context, id int32) (Class, error) {
	row := q.db.QueryRowContext(ctx, getClassById, id)
	var i Class
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Member,
		&i.MajorID,
	)
	return i, err
}

const getClassByMajorId = `-- name: GetClassByMajorId :many
SELECT id, name, member, major_id FROM classes
WHERE major_id = ?
`

func (q *Queries) GetClassByMajorId(ctx context.Context, majorID int32) ([]Class, error) {
	rows, err := q.db.QueryContext(ctx, getClassByMajorId, majorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Class
	for rows.Next() {
		var i Class
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Member,
			&i.MajorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClassByName = `-- name: GetClassByName :many
SELECT id, name, member, major_id FROM classes
WHERE name = ?
`

func (q *Queries) GetClassByName(ctx context.Context, name string) ([]Class, error) {
	rows, err := q.db.QueryContext(ctx, getClassByName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Class
	for rows.Next() {
		var i Class
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Member,
			&i.MajorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClassNameById = `-- name: GetClassNameById :one
SELECT name FROM classes
WHERE id = ?
`

func (q *Queries) GetClassNameById(ctx context.Context, id int32) (string, error) {
	row := q.db.QueryRowContext(ctx, getClassNameById, id)
	var name string
	err := row.Scan(&name)
	return name, err
}

const listClass = `-- name: ListClass :many
SELECT id, name, member, major_id FROM classes
ORDER BY name
`

func (q *Queries) ListClass(ctx context.Context) ([]Class, error) {
	rows, err := q.db.QueryContext(ctx, listClass)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Class
	for rows.Next() {
		var i Class
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Member,
			&i.MajorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
