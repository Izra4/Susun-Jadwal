// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: users.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO users(email,name,nim,id_prodi)
    VALUES (?,?,?,?)
`

type CreateUserParams struct {
	Email   string
	Name    string
	Nim     string
	IDProdi int32
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.Email,
		arg.Name,
		arg.Nim,
		arg.IDProdi,
	)
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
    WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, createdat, updatedat, deletedat, email, name, nim, id_prodi FROM users
ORDER BY id
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Createdat,
			&i.Updatedat,
			&i.Deletedat,
			&i.Email,
			&i.Name,
			&i.Nim,
			&i.IDProdi,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersByID = `-- name: GetUsersByID :one
SELECT id, createdat, updatedat, deletedat, email, name, nim, id_prodi FROM users
WHERE id = ?
`

func (q *Queries) GetUsersByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUsersByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Createdat,
		&i.Updatedat,
		&i.Deletedat,
		&i.Email,
		&i.Name,
		&i.Nim,
		&i.IDProdi,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
    SET email = ?, name = ?, nim = ?, id_prodi = ?
    WHERE id = ?
`

type UpdateUserParams struct {
	Email   string
	Name    string
	Nim     string
	IDProdi int32
	ID      int32
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Email,
		arg.Name,
		arg.Nim,
		arg.IDProdi,
		arg.ID,
	)
	return err
}
