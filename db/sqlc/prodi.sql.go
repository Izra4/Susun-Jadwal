// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: prodi.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createNewProdi = `-- name: CreateNewProdi :execresult
INSERT INTO program_studies(name)
    VALUES (?)
`

func (q *Queries) CreateNewProdi(ctx context.Context, name string) (sql.Result, error) {
	return q.db.ExecContext(ctx, createNewProdi, name)
}

const deleteProdi = `-- name: DeleteProdi :exec
DELETE FROM program_studies
    WHERE id = ?
`

func (q *Queries) DeleteProdi(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteProdi, id)
	return err
}

const getAllProdi = `-- name: GetAllProdi :many
SELECT id, createdat, updatedat, deletedat, name FROM program_studies
ORDER BY id ASC
`

func (q *Queries) GetAllProdi(ctx context.Context) ([]ProgramStudy, error) {
	rows, err := q.db.QueryContext(ctx, getAllProdi)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProgramStudy
	for rows.Next() {
		var i ProgramStudy
		if err := rows.Scan(
			&i.ID,
			&i.Createdat,
			&i.Updatedat,
			&i.Deletedat,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProdiById = `-- name: GetProdiById :one
SELECT id, createdat, updatedat, deletedat, name FROM program_studies
WHERE id = ?
`

func (q *Queries) GetProdiById(ctx context.Context, id int32) (ProgramStudy, error) {
	row := q.db.QueryRowContext(ctx, getProdiById, id)
	var i ProgramStudy
	err := row.Scan(
		&i.ID,
		&i.Createdat,
		&i.Updatedat,
		&i.Deletedat,
		&i.Name,
	)
	return i, err
}

const updateProdi = `-- name: UpdateProdi :exec
UPDATE program_studies
    SET name = ?
    WHERE id = ?
`

type UpdateProdiParams struct {
	Name string
	ID   int32
}

func (q *Queries) UpdateProdi(ctx context.Context, arg UpdateProdiParams) error {
	_, err := q.db.ExecContext(ctx, updateProdi, arg.Name, arg.ID)
	return err
}
